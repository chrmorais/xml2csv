<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CRII: SHF: Automatic Extraction of Error-Handling Specifications in Systems Software</AwardTitle>
    <AwardEffectiveDate>03/15/2015</AwardEffectiveDate>
    <AwardExpirationDate>02/28/2017</AwardExpirationDate>
    <AwardAmount>175000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Div Of Computer &amp; Communication Foundati</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Software error handling is the process of detecting and responding to&lt;br/&gt;the occurrence of errors during the execution of a program. Ideally,&lt;br/&gt;whenever a runtime error occurs, software systems should respond&lt;br/&gt;according to the programmer?s intent. Unfortunately, that is often not&lt;br/&gt;the case. Error-handling code is difficult to write, and tends to be&lt;br/&gt;poorly understood, poorly documented, and poorly tested.&lt;br/&gt;Unsurprisingly, error-handling code is often buggy. Bugs in software&lt;br/&gt;error handlers are some of the most pervasive, dangerous, and&lt;br/&gt;difficult to detect bugs. Incorrect error-handling is particularly&lt;br/&gt;alarming in systems software (e.g., the operating system) because user&lt;br/&gt;applications depend on the reliability of systems software. This&lt;br/&gt;research aims to gather a better understanding of error handling in&lt;br/&gt;systems software through automatic inference of error-handling&lt;br/&gt;specifications.&lt;br/&gt;&lt;br/&gt;Error-handling specifications describe how the system detects and&lt;br/&gt;recovers from errors. This research applies static program analysis&lt;br/&gt;techniques to automatically infer error-handling specifications in&lt;br/&gt;systems software. This task is particularly challenging because&lt;br/&gt;systems software implements numerous failure policies, and&lt;br/&gt;error-handling code is often diffused through the system. Furthermore,&lt;br/&gt;the analysis of such large code bases often faces scalability&lt;br/&gt;problems. Understanding existing error-handling strategies is the&lt;br/&gt;first step to ensure systems software is reliable. This understanding&lt;br/&gt;also has the potential to lead to the development of new&lt;br/&gt;error-handling mechanisms, and new programming language support for&lt;br/&gt;error handling. Both of these could have a significant impact on&lt;br/&gt;software reliability beyond systems software.</AbstractNarration>
    <MinAmdLetterDate>03/23/2015</MinAmdLetterDate>
    <MaxAmdLetterDate>03/23/2015</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1464439</AwardID>
    <Investigator>
      <FirstName>Cindy</FirstName>
      <LastName>Rubio Gonzalez</LastName>
      <EmailAddress>crubio@ucdavis.edu</EmailAddress>
      <StartDate>03/23/2015</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of California-Davis</Name>
      <CityName>Davis</CityName>
      <ZipCode>956186134</ZipCode>
      <PhoneNumber>5307547700</PhoneNumber>
      <StreetAddress>OR/Sponsored Programs</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>California</StateName>
      <StateCode>CA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>8228</Code>
      <Text>CISE Resrch Initiatn Initiatve</Text>
    </ProgramReference>
  </Award>
</rootTag>
